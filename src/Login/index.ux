<template>
  <!-- template里只能有一个根节点 -->
  <div class="login-page">


    <text class="text-welcome">{{welcome}}</text>


    <input class="input" type="text" id="username-input" placeholder="username" onchange="onUserNameChange" value="{{username}}"/>

    <input class="input" type="password" id="password-input" placeholder="password" onchange="onPasswordChange" value="{{password}}"/>


    <input class="btn-color btn" type="button" value="{{login}}" onclick="doLogin" />

    <input class="btn" type="button" value="{{register}}" onclick="doRegister" />




  </div>
</template>

<style>
  .login-page {
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .title {
    font-size: 40px;
    text-align: center;
  }

  .btn{

      width: 550px;
      height: 86px;
      margin-top: 75px;
      border-radius: 8px;
      font-size: 30px;
      color: #ffbc4d;
      background-color: #ffffff;

  }

  .btn-color {
    color: #ffffff;
    background-color: #ffbc4d;
  }

  .input{
    margin: 20px;
    padding: 10px;
    width: 550px;
    height: 86px;
    border-bottom-width : 3px;
    border-color :#eeeeee;
  }

  .text-welcome{
    color: #00bcd4;
    font-size: 60px;
    margin : 60px;
  }

</style>

<script>
  import router from '@system.router'
  import fetch from  '@system.fetch'
  import storage from '@system.storage'
  import UserCache from '../Common/UserCache'
  import Api from '../Common/Api'
  import webview from "@system.webview"
  import prompt from "@system.prompt"


  export default {
    // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
    protected: {
      welcome : "UESTC-BBS \n    @quickapp",
      username :"",
      password : "",
      register : "Register",
      login : "Login",
      tryingLogin : false
    },
    onInit(){


      var app = this.$app

         //读取登陆缓存
      storage.get({
        key : "user",
        success: function (data) {
          if(data){
            const user = JSON.parse(data)
            console.log('get userinfo oninit : ' + user.token)


            if(user != null && user.rs != 0){

             app.initUser(user)

             UserCache.init(app)

             router.push({
                uri: "Main"
            })
          }
        }

        },
        fail: function (data, code) {
          console.log(`handling fail, code = ${code}`)
        }
      })
    },
    onShow(){

      if(UserCache.user() != null ){

        this.username = UserCache.user().userName
      }
    },
    doLogin () {

      if(this.tryingLogin)
        return
      var app = this.$app
      //检查表单信息


      this.tryingLogin = true
      this.login = "稍我等在加中载"

      //发送登陆请求
      fetch.fetch({
        url : Api.BASE_URL+Api.login,
        method : "POST",
        data : {
          type :"login",
          username : this.username,
          password : this.password
        },
        success: function (data) {

          const user = JSON.parse(data.data)
          if(user != null && user.rs != 0){

             app.initUser(user)

             UserCache.init(app)

             router.push({
                uri: "Main"
             })
          } else{
            prompt.showToast({
              message : user.errcode
            })
          }

        }.bind(this),
        fail: function (data, code) {

          console.log(`handling fail,`)
        },
        complete : function (){
          this.login = "Login"
          this.tryingLogin = false
        }.bind(this)
      })
    }
    ,
    doRegister (e){

      webview.loadUrl({
        url : Api.REGISTER_URL
      })
    },
    onUserNameChange(e){
      this.username = e.target.attr.value
    },
    onPasswordChange(e){

      this.password = e.target.attr.value
    }
  }
</script>
