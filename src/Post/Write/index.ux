<template>
  <div class="write-page">

    <div class="board-select-bar">
        <div class="category">
            <text>请选择分区</text>

            <select class="category-select"   @change="onChangeGategory" if="{{category.length != 0}}" >

                    <option value="{{$item}}" for="category">{{$item.board_category_name}}</option>

            </select>

        </div>
        <div class="board"  if="{{board.length != 0}}">
              <text>请选择板块</text>

              <select class="board-select" @change="onSelectBoard"  >

                      <option selected="{{i == 0}}" value="{{b}}" for="(i,b) in board">{{b.board_name}}</option>

              </select>

        </div>
<!--
        <div class="child-board" if="{{childBoard.length >1}}">
              <select class=""  @change="onChangeChildBoard" name="child-board-select"  >

                      <option value="{{$item}}" for="childBoard">{{$item.board_name}}</option>

              </select>
        </div> -->
    </div>

    <div class="write-content">

        <div class="input input-header">
                <input id="publish-title" @change="onChangeTitle"class="input-title" placeholder="请输入标题" type="text"  value="{{publishTitle}}"></input>

                <input class="btn" type="button" value="发布" @click="onPublish" ></input>


        </div>
        <textarea @change="onChangeContent" class="input input-content" placeholder="请输入内容"></textarea>

        <list class="input input-classifi" columns="2">
                <list-item type="classi-text"  for="cl in classificationType_list">

                      <text class="classi-text {{cl.classificationType_id == targetClass.classificationType_id ? 'active' : ''}}" @click="onClickClassification(cl)">{{cl.classificationType_name}}</text>

                </list-item>
        </list>

    </div>

  </div>

</template>


<style lang="less">
    .write-page{
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;

        .board-select-bar{
              flex-direction: row;
              height: 130px;
              width: 100%;



              .category{
                  flex-direction: column;
                  background-color: #00bcd4;
                  width: 30%;
                  flex-grow: 1;
                  justify-content: center;

                  text{
                      padding: 8px;
                      font-size: 20px;
                  }
                  select {

                        color: #ffffff;
                        font-size: 50px;

                        option{
                          padding: 8px;
                          justify-content: center;
                        }
                  }
              }

              .board {
                  flex-direction: column;
                  width: 30%;
                  background-color: #ffbc4d;
                  flex-grow: 1;

                  justify-content: center;

                                text{
                                    padding: 8px;
                                    font-size: 20px;
                                }

                  select{

                        color: #ffffff;
                        font-size: 40px;


                        option{
                          padding: 16px;
                          justify-content: center;
                        }
                  }

              }



        }


        .write-content{
              flex-direction: column;
              width: 100%;
              height: 100%;

              justify-content: flex-start;
              align-items: flex-start;
              .input{
                    width: 100%;
                    margin: 16px;
                    padding: 8px;
                    border-bottom-width: 0.5px;
                    border-color: #00bcd4;
              }

              .input-header{
                    width: 100%;
                    height: 10%;

                    .input-title{
                          width: 70%;
                          height: 100%;
                    }

                    .btn{
                          width: 30%;
                          height: 100%;
                          background-color: #ffbc4d;
                          color: #eeeeee;
                          padding: 9px;
                    }


              }

              .input-content{
                height: 70%;
              }

              .input-classifi{
                    height: 20%;
                    flex-direction: row;
                    margin: 0px;
                    padding: 0px;

                    .classi-text{
                      background-color: #eeeeee;
                      border-radius: 8px;
                      font-size: 40px;
                      margin:16px;
                      padding: 16px;
                    }


                    .active{
                          background-color: #00bcd4;
                          color: #eeeeee;
                          font-size: 40px;
                    }
              }


        }

    }
</style>

<script>

    import BoardApi from '../../Common/BoardApi'
    import PostApi from '../../Common/PostApi'
    import prompt from '@system.prompt'
    export default{
      protected: {
        category :[],
        board :[],
        classificationType_list : [],
        targettBoardForumInfo :{},
        targetBoard:{},
        targetClass:{
                "classificationType_id": 0,
                "classificationType_name": "无"
        },
        publishTitle :"",
        publishContent : "",
        isPublishing : false


      },
      onInit(){
        BoardApi.init(this.$app)
        PostApi.init(this.$app)
        BoardApi.getForumList(
          function(data){
              const re = JSON.parse(data.data)
              this.category = re.list


          }.bind(this),
          function(data,code){
            console.log(code);
          }
        )
      },
      onChangeGategory(e){

          this.test = e.newValue
          this.board = []
          this.board = JSON.parse(e.newValue).board_list
          // this.childBoard = []
          this.onChangeBoard(this.board[0])
      }
      ,onChangeContent(e){
          this.publishContent = e.value
      }
      ,onChangeTitle(e){
        this.publishTitle = e.value
      }
      ,onSelectBoard(e){
        this.onChangeBoard(JSON.parse(e.newValue))
      }
      ,onChangeBoard(board){


        this.classificationType_list = [{
                "classificationType_id": 0,
                "classificationType_name": "无"
        }]
        this.targetClass = this.classificationType_list[0]



        var success = function (data){


            const re = JSON.parse(data.data)

            this.targettBoardForumInfo = re.forumInfo
            this.targetBoard = board


            this.classificationType_list = this.classificationType_list.concat(re.classificationType_list)


        }.bind(this)

        BoardApi.fetchClassificationTypeList(board.board_id,
          success)
      },
      onClickClassification(e){
          this.targetClass = e
          // console.log(id);
      }
      ,onPublish(){

            if(this.isPublishing){

                    var contentList = []
                    var publishContent = {}
                    publishContent.infor = this.publishContent
                    publishContent.type = 0
                    contentList.push(publishContent)

                    var info = {}
                    info.content = JSON.stringify(contentList)
                    info.title = this.publishTitle
                    info.fid = this.targetBoard.board_id
                    info.isAnonymous = 0
                    if(this.targetClass.classificationType_id != 0)
                    info.tyoeId = this.targetClass.classificationType_id

                    var body = {}
                    body.json = info

                    var publishJson = {}
                    publishJson.body = body


                    PostApi.publish(publishJson,
                      function(data){
                        console.log(data.data);
                        const re = JSON.parse(data.data)

                        prompt.showToast({
                          message : re.errcode
                        })

                        this.isPublishing = false

                      }.bind(this))


                    }

            }

    }

</script>
