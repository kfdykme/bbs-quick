<template>

  <stack>
    <div class="boardlist-page">

      <list>
        <block for="(x,c) in board">
          <list-item class="category-item"  type="category-title-{{c.board_list.length}}">

            <div class="category card">

              <text class="board-category-name">{{c.board_category_name}}</text>
              <!-- <div class="shadown-header"></div> -->
              <block for="(i,b) in c.board_list">
              <div>

                <image class="board-icon" src="../Res/{{ic[x][i]}}"></image>
                <text class="board-name" onclick="onClickEvent({type:'board',data :b.board_id})">{{b.board_name}} </text>
                <text class="board-post-date" onclick="onClickEvent({type:'board',data :b.board_id})" >{{b.last_posts_date}} </text>
              </div>



              </block>
            </div>

          </list-item>




        </block>
      </list>


    </div>
    <div class="shadown">
      <div class="shadown-header"></div>
      <div class="shadown-footer"></div>
    </div>
  </stack>
</template>


<style lang="less">
  @import './shadown.less';
  @import './base.less';
  @import './card.less';
  .boardlist-page{
    flex-direction:column;
    justify-content: center;
    align-items: center;
    background-color:#efefef;


    list{

        width: 100%;
        height: 100%;

        .category-item{
          flex-direction: column;
          margin:16px;
        }

        .category{

            flex-direction:column;
            width: 100%;
            padding-top: 16px;
            /* margin-left:32px;
            margin-right:32px; */
            padding-left: 24px;
            border-radius:32px;
            margin-top: 20px;
            margin-bottom: 20px;



            .board-category-name{
              width: 100%;
              color: #aaaaaa;
              font-size: 20px;

              margin-right: 16px;
            }

        }

        .board-icon {
          height:100%;
          width:10%;
          padding:16px;
          resize-mode: contain;
          margin-left:8px;
        }

        .board-name{

            width: 50%;
            margin: 14px;
            margin-left: 20px;
            font-size: 30px;
            padding: 10px;
            /* color: #00bcd4; */
            lines :1;
            text-align: left;
            /* border-left-width: 3px;
            border-color: #11cde5; */


        }


        .board-post-date{
          color: #ff645e;
          opacity: 0.6;
          width: 40%;
          lines:1;

          text-align: center;

        }

    }


  }
</style>


<script>
import BoardApi from '../Common/BoardApi'
import router from '@system.router'
import DateUtil from '../Common/DateUtil'
import storage from '@system.storage'

class BoardListPresenter{

    constructor(view){
        this.view = view
        this.app = view.context.$app

        BoardApi.init(this.app)
    }

    async loadLocal(){
        const res = await storage.get({key:"BoardList"})
        try{
          const re = JSON.parse(res.data)

          this.view.renderBoard(re)
        } catch (e){
          this.view.renderEmpty()
        }
    }

    load(){
        BoardApi.getForumList(
          function (data){
            const re = JSON.parse(data.data)

            for(let x in re.list){
                for(let y in re.list[x].board_list){
                    const t = re.list[x].board_list[y]

                    t.last_posts_date = DateUtil.convertTimeShort(t.last_posts_date)
                }

                re.list[x].board_list = re.list[x].board_list.filter(item => BoardApi.checkBoardCanFetch(item.board_name))
            }

            re.list = re.list.filter(item => item.board_list.length > 0)

            this.save(re)
            this.view.renderBoard(re)

          }.bind(this),

          function (data,code){
            console.log(code);
          }
        )
    }

    onClickEvent(event){
        switch (event.type) {
            case 'board':
                router.push({
                  uri : "Main/Board",
                  params : {
                    boardId : event.data
                  }
                })
                break;
            default:
                break;
        }
    }

    async save(re){
        const data = JSON.stringify(re)
        const res = await storage.set({key :"BoardList",value:data})
        console.info("on save boardlist : "+JSON.stringify(res))
    }
}

export default{
  props:[

  ],
  data :{
    board : [],
    ic :[
      [
        '就业创业.svg',
        '情感.svg',
        '评论.svg',
        '热点.svg',
        '交通出行.svg',
        '轨迹.svg',
        '同城.svg',
        '毕业.svg',
      ],
      [
        '前端.svg',
        '数字.svg',
        'FAQ.svg',
        '硬件.svg',
        'linux.svg',
        '程序.svg',
        '电子.svg'
      ],
      [
        '船舵.svg',
        '吃喝玩乐.svg',
        '自行车.svg',
        '视觉设计.svg',
        '军事.svg',
        '舞蹈.svg',
        '音乐.svg',
        '文.svg',
        '体育.svg',
        '影视.svg',
        '动漫.svg',
        '跑步.svg'
      ],
      [
        '二手.svg',
        '房屋.svg',
        '店铺.svg'
      ]
    ]
  },
  view(){
      var View = new Object
      View.context = this
      View.renderBoard  = function(re){

          this.board = re.list
      }.bind(this)

      View.renderEmpty = function(){
        //todo
      }


      return View
  }
  ,onInit(){

      this.presenter = new BoardListPresenter(this.view())
      this.presenter.loadLocal()
      this.presenter.load()

  }
  ,onClickEvent(event){
      this.presenter.onClickEvent(event)
  }

}

</script>
